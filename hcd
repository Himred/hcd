#!/bin/sh

#
# Health Care Daemon (hcd)
#
# Version: 1.1
#
# Author: Gasmi Salim (salim@gasmi.net)
#

###########################################
# Function Log : Display a message to stdout
# Param 1: The message to display
###########################################
function Log
{
echo "$(date): $1"
}


###########################################
# Function DockerGet : Send an HTTP GET request to the docker socket
# Param 1: The URL to GET
# Return: The docker reply
###########################################
function DockerGet
{
curl -s --unix-socket /var/run/docker.sock http://docker$1
}

###########################################
# Function DockerPost : Send an HTTP POST request to the docker socket
# Param 1: The URL to POST
# Param 2: The data to send in the form "a=1&b=2&c=3"
# Return: The docker reply
###########################################
function DockerPost
{
curl -s --unix-socket /var/run/docker.sock -X POST -d "$2" http://docker$1
}

###########################################
# Function Unhealthy : List the unhealthy containers
# Return: A list of id/name containers
###########################################
function Unhealthy
{
DockerGet /containers/json | jq '[ .[] | select( .Status | contains("unhealthy")) | .Id + .Names[0] ] | .[]' | tr -d '"'
}

###########################################
# Function GetLabel : Get the com.himred.hcd value of a container
# Param 1: The container id
# Return: The label value (empty if no label)
###########################################
function GetLabel
{
DockerGet /containers/json | jq ".[] | select( .Id == (\"$1\")) | .Labels | to_entries[] | select ( .key == ( \"com.himred.hcd\")) | .value" | tr -d '"'
}


###########################################
# Function GetState : Get the state of a container
# Param 1: The container name
# Return: The state (empty if container does not exists)
###########################################
function GetState
{
DockerGet "/containers/json?all=1" | jq ".[] | { name: .Names[] , state: .State} | select (.name == \"/$1\") | .state" | tr -d '"'
}

###########################################
# Function Restart : Restart a container
# Param 1: The container id or name
###########################################
function Restart
{
Log "$2 is unhealthy : restarting the container"
DockerPost /containers/$1/restart "t=0"
Log "$2 restarted"
}

###########################################
# Function Stop : Stop a container
# Param 1: The container id or name
# Return: The docker reply
###########################################
function Stop
{
Log "$2 is unhealthy : stopping the container"
DockerPost /containers/$1/stop "t=0"
Log "$2 stopped"
}

###########################################
# Function Start: Start a container
# Param 1: The yml docker-compose file
###########################################
function Start
{
test "$1" = "" && Log "Docker compose file name is empty .. unable to start" && return
echo "$1" | egrep -iq "\.yml$"
test $? -ne 0 && Log "$1 does not have the .yml extension, the filename must end with .yml" && return

file=/hcd/$1
test ! -f $file && Log "Unable to find file $file ... have you mounted the volume /hcd ?" && return

srv=$(echo $1 | cut -f1 -d.)
Log "Starting service $srv using docker-compose file $file"

r=$(/usr/local/bin/docker-compose -p $srv -f $file up -d 2>&1)
ret=$?
test $ret -eq 0 && Log "$1 Started : $r"
test $ret -ne 0 && Log "$1 Start failed: $r"
}

###########################################
# Function StopAndStart : Stop the faulty container and create another one
# Param 1: The container id to stop
# Param 2: The container name to stop
# Param 3: The action in the form "create docker_compose_file.yml"
###########################################
function StopAndStart
{
Stop $1 "$2"
name=$(echo $3 | cut -f2- -d" ")
Log "Since $2 is unhealthy and found label '$3', I will create $name"
Start "$name"
}


#######################################################################
# main()
#######################################################################

# I get the sleep time from env
sleep=$INTERVAL

test "$sleep" = "" && sleep=60 && Log "variable INTERVAL is not defined, using default value 60"
Log "hcd started, interval=$sleep"

# The main loop
while :
do
        n=0
        for i in $(Unhealthy)
        do
                n=$((n+1))
                id=${i%%/*}
                name=${i##*/}
                action=$(GetLabel $id)
                ok=0

                test "$action" = "" && action="restart"
                test "$action" = "restart" && ok=1 && Restart $id "$name"
                test "$action" = "stop" && ok=1 && Stop $id "$name"
                test "$action" = "ignore" && ok=1 && Log "$name is unhealthy but label ignore found, doing nothing"
                test $ok -eq 0 && echo "$action" | egrep -q "^start " && ok=1 && StopAndStart $id "$name" "$action"
                test $ok -eq 0 && Log "$name is unhealthy but found an unknwon label ($action), doing nothing"
        done

        Log "$n unhealthy container(s) found, sleeping $sleep seconds"
        sleep $sleep
done
